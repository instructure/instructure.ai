name: Release Packages

on:
  workflow_run:
    workflows: ["Tag on Merge"]
    types:
      - completed

permissions:
  id-token: write
  contents: write

jobs:
  publish:
    environment: npm-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        run: npm install -g pnpm

      - uses: actions/setup-node@v4
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'
      
      - name: Install pnpm
        run: npm install -g pnpm

      - name: Fetch all tags
        run: git fetch --tags

      - name: Find all new package tags on this commit
        id: find_tags
        run: |
          TAGS=$(git tag --points-at HEAD | grep -E '^@instructure.ai/.+@([0-9]+\.[0-9]+\.[0-9]+)$' || true)
          if [[ -z "$TAGS" ]]; then
            echo "No new matching tags found on this commit."
            exit 0
          fi
          # Save tags list for next steps
          echo "tags<<EOF" >> $GITHUB_ENV
          echo "$TAGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Release each package tag
        if: env.tags != ''
        env:
          tags: ${{ env.tags }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          IFS=$'\n'
          for TAG in $tags; do
            PKG_NAME=$(echo "$TAG" | sed -E 's/@instructure.ai\/([^@]+)@.*/\1/')
            echo "Processing release for tag: $TAG (package: $PKG_NAME)"

            # Remove deprecated always-auth from any pre-existing .npmrc
            if [ -f "$HOME/.npmrc" ]; then
              sed -i.bak '/always-auth/d' "$HOME/.npmrc"
            fi

            # Install deps
            pnpm install --frozen-lockfile

            # Enable vite-node loader using the register() API
            export NODE_OPTIONS="--import=${{ github.workspace }}/scripts/loader.mjs"

            # Build
            if [ "$PKG_NAME" = "shared-configs" ]; then
              echo "Skipping build for @instructure.ai/shared-configs."
            else
              echo "Building package: $PKG_NAME"
              CI=1 pnpm build package "$PKG_NAME"
            fi

            # Test
            if [ "$PKG_NAME" = "shared-configs" ]; then
              echo "Skipping test for @instructure.ai/shared-configs."
            else
              pnpm -F "$PKG_NAME" test
            fi

            # Publish (use npm CLI to trigger OIDC Trusted Publishing)
            if [ "$PKG_NAME" = "shared-configs" ]; then
              echo "Skipping publish for @instructure.ai/shared-configs."
            else
              PKG_JSON_PATH="packages/$PKG_NAME/package.json"
              APP_JSON_PATH="apps/$PKG_NAME/package.json"
              if [ -f "$PKG_JSON_PATH" ]; then
                JSON_PATH="$PKG_JSON_PATH"
              elif [ -f "$APP_JSON_PATH" ]; then
                JSON_PATH="$APP_JSON_PATH"
              else
                JSON_PATH=""
              fi

              TARBALL=$(ls ./packages/$PKG_NAME/dist/*.tgz 2>/dev/null | head -n 1)
              if [ -z "$TARBALL" ]; then
                echo "Error: No .tgz tarball found for $PKG_NAME in ./packages/$PKG_NAME/dist/"
                continue
              fi
              if [ -n "$JSON_PATH" ]; then
                ACCESS_PUBLIC=$(jq -r '.publishConfig.access // empty' "$JSON_PATH")
                PRIVATE=$(jq -r '.private // false' "$JSON_PATH")
                if [ "$PRIVATE" = "true" ]; then
                  echo "Skipping publish for $PKG_NAME because it is marked private in package.json."
                elif [ "$ACCESS_PUBLIC" = "public" ]; then
                  echo "Publishing $PKG_NAME as public via npm (OIDC)…"
                  npm publish "$TARBALL" --access public --provenance
                elif [ -n "$ACCESS_PUBLIC" ] && [ "$ACCESS_PUBLIC" != "public" ]; then
                  echo "Skipping publish for $PKG_NAME because publishConfig.access is '$ACCESS_PUBLIC' (not public)."
                else
                  echo "Publishing $PKG_NAME via npm (no --access public)…"
                  npm publish "$TARBALL" --provenance
                fi
              else
                echo "package.json not found for $PKG_NAME in packages or apps, publishing without access check."
                npm publish "$TARBALL" --provenance
              fi
            fi

            # Create GitHub release using gh CLI
            if [ "$PKG_NAME" = "shared-configs" ]; then
              gh release create "$TAG" --title "$TAG" --generate-notes
            else
              gh release create "$TAG" ./packages/$PKG_NAME/dist/*.tgz --title "$TAG" --generate-notes
            fi
          done
